#! /usr/bin/env ruby

require "pg"

require "io/console"

class ExpenseData
  def initialize
    @connection = PG.connect(dbname:"expenses")
    setup_schema
  end

  def add_expense(amount, memo)
      sql = "INSERT INTO expenses (amount, memo) VALUES ($1, $2)"
      @connection.exec_params(sql, [amount, memo])
  end
  
  def list_expenses
    sql = "SELECT * FROM expenses ORDER BY created_on DESC"
    results = @connection.exec_params(sql)
    display_expenses(results)
  end
  
  def search_expenses(term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    results = @connection.exec_params(sql, ["%#{term}%"])
    display_expenses(results)
  end
  
  def delete_expense(id)
    select_sql = "SELECT * FROM expenses WHERE id = $1"
    expense_for_deletion = @connection.exec_params(select_sql, [id])
    
    p expense_for_deletion.ntuples
    
    abort "There is no expense with the id #{id}" unless expense_for_deletion.values[0]
    puts "The following expense has been deleted:"
    display_expenses(expense_for_deletion)
    
    delete_sql = "DELETE FROM expenses WHERE id = $1"
    @connection.exec_params(delete_sql, [id])
  end

  def clear_expenses
    sql = "DELETE FROM expenses"
    @connection.exec_params(sql)
    puts "All expenses have been deleted"
  end

  private

  def setup_schema
    sql = "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses';"
    result = @connection.exec_params(sql)
    
    if result[0]["count"] == "0"
      sql = <<~SQL 
        CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount numeric(6,2) NOT NULL CHECK(amount > 0),
          memo text NOT NULL,
          created_on date NOT NULL DEFAULT NOW()
        );
      SQL
      @connection.exec_params(sql)Question 1
What will the following code log to the console and why? Don't run it until you have tried to answer.

Copy Code
let myWord = 'Hello';
let myOtherWord = myWord;

console.log(myWord);
console.log(myOtherWord);
Solution 1
Question 2
What will the following code log to the console and why? Don't run it until you have tried to answer.

Copy Code
let myWord = 'Hello';
let myOtherWord = myWord;
myWord = 'Goodbye';

console.log(myWord);
console.log(myOtherWord);
Solution 2
Question 3
What will the following code log to the console and why? Don't run it until you have tried to answer.

Copy Code
let myWords = ['Hello', 'Goodbye'];
let myOtherWords = myWords;
myWords[0] = 'Hi';

console.log(myWords);
console.log(myOtherWords);
Solution 3
Question 4
What will the following code log to the console and why? Don't run it until you have tried to answer.

Copy Code
let myWords = ['Hello', 'Goodbye'];
let myOtherWords = myWords;
myWords = ['Hi', 'Bye'];

console.log(myWords);
console.log(myOtherWords);
Solution 4
Question 5
What will the following code log to the console and why? Don't run it until you have tried to answer.

Copy Code
let myWords = ['Hello', 'Goodbye'];
let myWord = myWords[0];
myWords[0] = 'Hi';

console.log(myWords);
console.log(myWord);
Solution 5
Question 6
What will the following code log to the console and why? Don't run it until you have tried to answer.

Copy Code
let myWords = ['Hello', 'Goodbye'];
let myWord = 'Hi';
myWords[0] = myWord;
myWord = 'Hello';

console.log(myWords);
console.log(myWord);
Solution 6
    end

  end
  def display_count(expenses)
    count_text = case expenses.ntuples
      when 0 then "There are no expenses."
      when 1 then "There is 1 expense."
      else "There are #{expenses.ntuples} expenses."
    end

    puts count_text
  end

  def display_expenses(expenses)
    display_count(expenses)
    
    total = 0

    expenses.each do |expense|
      puts "#{expense['id']} | #{expense['created_on']} | #{expense['amount'].rjust(8)} | #{expense['memo']} "
      total += expense['amount'].to_f
    end

    if total > 0
      puts "-" * 40
      puts "Total #{format('%.2f', total.to_s).rjust(19)}"
    end
  end
end

class CLI
  def initialize
    @data = ExpenseData.new
  end

  def run(arguments)
    command = arguments.first
    if command == 'list'
      @data.list_expenses
    elsif command == 'add'
      amount = arguments[1]
      memo = arguments[2]
      abort "You must provide an amount and memo." unless amount && memo
      @data.add_expense(amount, memo)
    elsif command == 'search'
      term = arguments[1]
      @data.search_expenses(term)
    elsif command == 'delete'
      @data.delete_expense(arguments[1])
    elsif command == 'asdf'
      puts "This will remove all expenses. Are you sure? (y/n)"
      answer = $stdin.getch
      @data.clear_expenses if answer == 'y'
    else
      print_help
    end

  end

  def print_help
    output = <<~HELPTEXT
      An expense recording system
  
      Commands:
  
      add AMOUNT MEMO - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELPTEXT
  
    puts output
  end

end

CLI.new.run(ARGV)






